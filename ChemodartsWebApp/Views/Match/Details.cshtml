@model MatchViewModel

@{
    ViewData["Title"] = "Match Details";
}

<h1>Match Info (@Model.M.Group.Round.Tournament.TournamentName - @Model.M.Group.Round.RoundName)</h1>

<h2>Ergebnis</h2>
@await Html.PartialAsync("../Shared/DisplayTemplates/Match/MatchList", new List<Match>() {Model.M}, new ViewDataDictionary(ViewData) { { "ShowGroup", "false" }})

<h2>Direkter Vergleich</h2>
<div>
    <table class="table table-center">
        <colgroup>
            <col style="width: 50%;">
            <col style="width: auto;">
            <col style="width: 50%;">
        </colgroup>
        <thead>
            <tr>
                <th><b>@Model.M.Seed1?.Player.CombinedName</b></th>
                <th>vs.</th>
                <th><b>@Model.M.Seed2?.Player.CombinedName</b></th>
            </tr>
        </thead>
        <tbody>
        @if (Model.M.Group.Round.Modus != RoundModus.RoundRobin) {
            <tr>
                <td>
                    <a cd-route="Group" cd-action="Index" cd-route-groupId="@Model.M.Seed1.Group.GroupId">
                        @Html.DisplayFor(model => model.M.Seed1.Group.GroupName) (<span>@Model.M.Seed1.SeedRank</span>. Platz)
                </a></td>
                @Html.DisplayFor(m => Model.M, "Match/Columns/MatchGroup", new { RenderType = "Header"})
                <td>
                    <a cd-route="Group" cd-action="Index" cd-route-groupId="@Model.M.Seed1.Group.GroupId">
                        @Html.DisplayFor(model => model.M.Seed2.Group.GroupName) (<span>@Model.M.Seed2.SeedRank</span>. Platz)
                </a></td>
            </tr>
        }
             <tr>
                <td><a cd-route="Seed" cd-action="Details" cd-route-seedId="@Model.M.Seed1.SeedId">Seed #@Model.M.Seed1.SeedNr</a></td>
                <td><b>Seed</b></td>
                <td><a cd-route="Seed" cd-action="Details" cd-route-seedId="@Model.M.Seed2.SeedId">Seed #@Model.M.Seed2.SeedNr</a></td>
            </tr>
             <tr>
                <td><b>@Model.PC.Statistics.MatchesWon</b> von @Model.PC.Statistics.Matches</td>
                <td><b>Siege</b></td>
                <td><b>@(Model.PC.Statistics.Matches - Model.PC.Statistics.MatchesWon)</b> von @Model.PC.Statistics.Matches</td>
            </tr>
             <tr>
                <td><b>@Model.PC.Statistics.PointsFor</b> von @(Model.PC.Statistics.PointsFor + Model.PC.Statistics.PointsAgainst)</td>
                <td><b>Legs</b></td>
                <td><b>@Model.PC.Statistics.PointsAgainst</b> von @(Model.PC.Statistics.PointsFor + Model.PC.Statistics.PointsAgainst)</td>
            </tr>
             <tr>
                <td><b>@Model.PC.Statistics.PointsDiff</b></td>
                <td><b>Leg Differenz</b></td>
                <td><b>@(-Model.PC.Statistics.PointsDiff)</b></td>
            </tr>
        </tbody>
    </table>
</div>

<h2>Historie</h2>
@await Html.PartialAsync("../Shared/DisplayTemplates/Match/MatchList", Model.PC?.MatchesBetween?.OrderBy(m => m.MatchId), new ViewDataDictionary(ViewData) { { "ShowTournament", "true" }, { "ShowGroup", "true" }})