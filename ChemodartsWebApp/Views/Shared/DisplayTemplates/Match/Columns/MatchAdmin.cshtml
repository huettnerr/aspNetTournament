@model Match

@switch(ViewData["RenderType"])
{
    case "Header":
        <th>
            Aktion
        </th>
        break;
    case "Content":
        <td>
            @if(Model.Group.Round.IsRoundStarted && ! Model.Group.Round.IsRoundFinished) {
                @if(Model.Status.Equals(Match.MatchStatus.Created)) 
                {
                    <a cd-route="Match" cd-action="Start" cd-route-tournamentId="@Model.Group.Round.TournamentId" cd-route-roundId="@Model.Group.RoundId" cd-route-matchId="@Model.MatchId"> Start </a>
                }
                else 
                {
                    <a asp-route-matchId="@Model.MatchId" asp-route-editMatchId="@Model.MatchId" asp-route-showAll="@Context.Request.Query["showAll"]" asp-fragment="Match_@Model.MatchId">Edit</a>
                    @*<a asp-action="MatchEditScore" asp-route-matchId="@Model.MatchId" asp-route-showAll="@Context.Request.Query["showAll"]">Edit</a>*@

                    @if (Model.Status.Equals(Match.MatchStatus.Active))
                    {
                        @if (!(Model.Venue is object) && Model.Group.Round.MappedVenues.Select(mv => mv.Venue).Where(v => v.Match is null).ToList().Count > 0)
                        {
                            <span> | </span>
                            <a cd-route="Match" cd-action="AssignBoard" cd-route-tournamentId="@Model.Group.Round.TournamentId" cd-route-roundId="@Model.Group.RoundId" cd-route-matchId="@Model.MatchId">
                                Assign Board (@Model.Group.Round.MappedVenues.Select(mv => mv.Venue).Where(v => v.Match is null).ToList().Count frei)
                            </a>
                        }
                    }
                }

            }
            else
            {
                @if(Model.Group.Round.IsRoundFinished) { <span>Runde beendet</span> }else{ <span>nicht gestartet</span> } 
            }
        </td>
        break;
    default:
        goto case "Content";
}