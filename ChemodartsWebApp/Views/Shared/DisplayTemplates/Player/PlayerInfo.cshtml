@model ChemodartsWebApp.Models.Player
@using ChemodartsWebApp.ModelHelper

@{
    ViewData["Title"] = "Details";

    bool showHistory = true; ;
    if (ViewData["ShowHistory"]?.Equals("false") ?? false) showHistory = false;
}

<h1>Spieler <b>@Html.DisplayFor(model => model.CombinedName)</b></h1>
<div>
    @if (User.Identity.IsAuthenticated)
    {
        <a cd-route="Players" cd-action="Edit" cd-route-playerId="@Model?.PlayerId">Edit</a>
    }
    <hr />
</div>
<div>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PlayerName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PlayerName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PlayerDartname)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PlayerDartname)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PlayerContactData)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PlayerContactData)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PlayerInterpret)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PlayerInterpret)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PlayerSong)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PlayerSong)
        </dd>
    </dl>
</div>

@if (showHistory)
{
    <div>
        <h2>Statistik</h2>
        @{
            var dummySeed = Model.Seeds?.FirstOrDefault();

            List<Match> matchesAll = new List<Match>();
            Model.Seeds?.ToList().ForEach(s => matchesAll.AddRange(s.Matches));
            SeedStatistics statsAll = new SeedStatistics();
            statsAll.CalculateCombinedMatchStatistic(matchesAll, Model);

            List<Match> matchesRR = new List<Match>();
            Model.Seeds?.ToList().ForEach(s => matchesRR.AddRange(s.Matches.Where(m => m.Group.Round.Modus == RoundModus.RoundRobin)));
            SeedStatistics statsRR = new SeedStatistics();
            statsRR.CalculateCombinedMatchStatistic(matchesAll, Model);

            List<Match> matchesKO = new List<Match>();
            Model.Seeds?.ToList().ForEach(s => matchesKO.AddRange(s.Matches.Where(m => m.Group.Round.Modus != RoundModus.RoundRobin)));
            SeedStatistics statsKO = new SeedStatistics();
            statsKO.CalculateCombinedMatchStatistic(matchesAll, Model);
        }
        <table class="table">
            <thead>
                <tr>
                    <th>Kategorie</th>
                    @Html.DisplayFor(m => dummySeed, "Seed/Columns/SeedStats", new { RenderType = "Header" })
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Alle Matches</td>
                    @Html.DisplayFor(m => statsAll, "Seed/Columns/SeedStats", new { RenderType = "Content" })
                </tr>
                <tr>
                    <td>Gruppenphase</td>
                    @Html.DisplayFor(m => statsRR, "Seed/Columns/SeedStats", new { RenderType = "Content" })
                </tr>
                <tr>
                    <td>KO-Phase</td>
                    @Html.DisplayFor(m => statsKO, "Seed/Columns/SeedStats", new { RenderType = "Content" })
                </tr>
            </tbody>
        </table>
    </div>

    <h2>Gespielte Turniere</h2>
    @foreach (var seed in Model.Seeds.OrderBy(s => s.Round.Tournament.TournamentId))
    {
        //@Html.DisplayFor(m => seed, "Tournament/SeedResult")
        <h3>
            <a cd-route="Seed" cd-action="Details" cd-route-tournamentId=@seed.Round.Tournament.TournamentId cd-route-seedId=@seed.SeedId>
                @seed.Round.Tournament.TournamentName
            </a>
        </h3>
        <br />
        @await Html.PartialAsync("../Shared/DisplayTemplates/Match/MatchList", seed.Matches.OrderBy(m => m.MatchId), new ViewDataDictionary(ViewData) { { "ShowGroup", "true" }})
    }
}